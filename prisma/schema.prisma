generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  email            String            @unique
  name             String?
  password         String
  breakInterval    Int?              @default(10) @map("break_interval")
  intervalsCount   Int?              @default(7) @map("intervals_count")
  workInterval     Int?              @default(50) @map("work_interval")
  taskBlockRound   Boolean?          @default(false) @map("task_block_round")
  pomodoroSessions PomodoroSession[]
  tasks            Task[]
  timeBlocks       TimeBlock[]

  @@map("user")
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
   totalTime Int? @map("total_time")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  timeSpentTasks TimeSpentTask[]

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model PomodoroSession {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  isCompleted Boolean?        @default(false) @map("is_completed")
  userId      String          @map("user_id")
  rounds      PomodoroRound[]
  user        User            @relation(fields: [userId], references: [id])

  @@map("pomodoro_session")
}

model PomodoroRound {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  isCompleted       Boolean?        @default(false) @map("is_completed")
  pomodoroSessionId String          @map("pomodoro_session_id")
  totalSeconds      Int             @map("total_seconds")
  pomodoroSession   PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)

  @@map("pomodoro_round")
}

model TimeSpentTask {
        id             String    @id @default(cuid())
        taskId         String    @map("task_id")
        createdAt      DateTime  @default(now()) @map("created_at")
        updatedAt      DateTime  @updatedAt @map("updated_at")
        startTime      DateTime  @map("start_time")
        endTime        DateTime? @map("end_time")
        totalTime      Int?      @map("total_time")
        isCompleted    Boolean?  @default(false) @map("is_completed")
        additionalData String?   @map("additional_data")
        task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

        @@map("time_spent_task")
}

enum Priority {
  low
  medium
  high
}
